import os
from datetime import date
import click
from lib import (
  TableMap,
  read_csv,
  format_phone,
  utc_from_timestamp,
  utc_from_utc_str
)

table_map = TableMap(
  database_url=os.environ.get('DATABASE_URL'),
  mapping=[
    ('apn', 'apn', str, None),
    ('OBJECTID', 'object_id', int, None),
    ('licenseNumber', 'license_number', str, None),
    ('category', '', str, None),
    ('milestone', '', str, None),
    ('tier', '', str, None),
    ('status', '', str, None),
    ('issueDate', 'issue_date', date, utc_from_utc_str),
    ('expirationDate', 'expiration_date', date, utc_from_utc_str),
    ('address', '', str, None),
    ('ownerName', 'owner_name', str, None),
    ('ownerAddress1', 'owner_address_1', str, None),
    ('ownerAddress2', 'owner_address_2', str, None),
    ('ownerCity', 'owner_city', str, None),
    ('ownerState', 'owner_state', str, None),
    ('ownerZip', 'owner_zip', str, None),
    ('ownerPhone', 'owner_phone', str, format_phone),
    ('ownerEmail', 'owner_email', str, None),
    ('applicantName', 'applicant_name', str, None),
    ('applicantAddress1', 'applicant_address_1', str, None),
    ('applicantAddress2', 'applicant_address_2', str, None),
    ('applicantCity', 'applicant_city', str, None),
    ('applicantState', 'applicant_state', str, None),
    ('applicantZip', 'applicant_zip', str, None),
    ('applicantPhone', 'applicant_phone', str, format_phone),
    ('applicantEmail', 'applicant_email', str, None),
    ('licensedUnits', 'licensed_units', int, None),
    ('ward', '', str, None),
    ('neighborhoodDesc', 'neighborhood_desc', str, None),
    ('communityDesc', 'community_desc', str, None),
    ('policePrecinct', 'police_precinct', str, None),
    ('latitude', '', float, None),
    ('longitude', '', float, None),
    ('xWebMercator', 'x_web_mercator', float, None),
    ('yWebMercator', 'y_web_mercator', float, None)
  ]
)

@click.group()
def app():
  pass

@click.command()
@click.option('-s', '--schema-path', help='Path to table schema sql file')
@click.option('-t', '--table-name', help='The name of the sql table')
def schema(schema_path, table_name):
  '''Create a PostgreSQL table schema'''
  table_map.write_schema_file(table_name, schema_path)

@click.command()
@click.option('-s', '--schema-path', help='Path to table schema sql file')
def table(schema_path):
  '''Create a PostgreSQL table using a schema generated by the "schema" subcommand'''
  table_map.create_table(schema_path)

@click.command()
@click.option('-t', '--table-name', help='The name of the sql table')
@click.argument('path')
def transfer(table_name, path):
  '''Transfer data from a CSV to the PostgreSQL database table'''
  table_map.transfer_data(table_name, read_csv(path))

app.add_command(schema)
app.add_command(table)
app.add_command(transfer)

if __name__ == '__main__':
  app()